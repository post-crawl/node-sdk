name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["18.x", "20.x", "22.x"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run tests
        run: bun run test:ci

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Check formatting
        run: bun run check
      
      - name: Run linter
        run: bun run lint
      
      - name: Type check
        run: bun run typecheck

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build package
        run: bun run build
      
      - name: Check package files
        run: |
          bun run pack
          ls -la *.tgz
          tar -tzf *.tgz | head -20
      
      - name: Test package installation
        run: |
          mkdir test-install
          cd test-install
          bun init -y
          bun add ../postcrawl-*.tgz
          echo "import { PostCrawlClient } from 'postcrawl';" > test.ts
          echo "console.log('Import successful');" >> test.ts
          bun run test.ts

  check:
    if: always()
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    steps:
      - name: Check all CI passed
        run: |
          if [[ "${{ needs.test.result }}" != "success" || 
                "${{ needs.lint.result }}" != "success" ||
                "${{ needs.build.result }}" != "success" ]]; then
            echo "CI failed"
            exit 1
          fi
          echo "All CI checks passed!"